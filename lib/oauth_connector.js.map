{"version":3,"sources":["oauth_connector.js"],"names":[],"mappings":"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","file":"oauth_connector.js","sourcesContent":["'use strict';\nimport Bluebird from 'bluebird';\nimport config from 'config';\nimport url from 'url';\nimport {\n  clone\n}\nfrom 'lodash';\nimport {\n  OAuth\n}\nfrom '@hoist/oauth';\nimport logger from '@hoist/logger';\n\n/**\n * @protected\n * The base OAuth2 Connector class used for Hoist Connectors to implement OAuth2 flows\n * @implements {ConnectorInterface}\n */\nexport default class OAuthConnectorBase {\n\n  /**\n   * @protected\n   * create a new OAuth2Connector\n   * @param {object} configuration - the configuration details for this connector\n   * @param {string} configuration.consumerKey - the OAuth consumer key\n   * @param {string} configuration.consumerSecret - the OAuth consumer secret\n   * @param {string} configuration.requestTokenUri - the uri to use for request token calls\n   * @param {string} configuration.accessTokenUri - the uri to use for access token calls\n   * @param {string} configuration.authorizationUri - the uri to send users to authorise access\n   * @param {object} [configuration.oauthVersion=1.0A] - the version of OAuth to use\n   * @param {object} [configuration.signingMethod=HMAC-SHA1] - the signing method to use\n   */\n  constructor(configuration) {\n    this._logger = logger.child({\n      cls: this.constructor.name\n    });\n    this._configuration = configuration;\n    this._configuration.authorizationUri = url.parse(this._configuration.authorizationUri, true);\n    this._auth = Bluebird.promisifyAll(\n      new OAuth(\n        configuration.requestTokenUri,\n        configuration.accessTokenUri,\n        configuration.consumerKey,\n        configuration.consumerSecret,\n        configuration.oauthVersion || '1.0A',\n        `https://${config.get('Hoist.domains.bouncer')}/bounce`,\n        configuration.signingMethod || 'HMAC-SHA1'\n      ));\n  }\n\n  /**\n   * perform an authorized request\n   * @param {string} method - the HTTP method to call\n   * @param {string} requestUri - the uri of the request to call\n   * @param {string} body - the data to send\n   * @param {string} contentType - the contentType header\n   */\n  _performRequest(method, requestUri, body, contentType) {\n    return this._auth._performSecureRequestAsync(\n      this._accessToken,\n      this._accessTokenSecret,\n      method,\n      requestUri,\n      null,\n      body,\n      contentType)\n  }\n\n  /**\n   * authorize the oauth connection with existing parameters\n   * @param {<AuthorizationStore>} authorization - the users authorization\n   */\n  authorize(authorization) {\n    this._accessToken = authorization.get('AccessToken');\n    this._accessTokenSecret = authorization.get('AccessTokenSecret');\n  }\n\n  /**\n   * @param {AuthorizationStore} authorization - the users authorization\n   */\n  receiveBounce(authorization) {\n    console.log(this);\n    this._logger.info('receiving bounce');\n    var authStep = authorization.get('currentStep');\n    switch (authStep) {\n    case 'RequestToken':\n      //get access token\n      this._logger.info('requesting access token');\n      return this._auth.getOAuthAccessTokenAsync(\n          authorization.get('RequestToken'),\n          authorization.get('RequestTokenSecret'),\n          authorization.query.oauth_verifier)\n        .then((results) => {\n          return Promise.all([\n            authorization.set('AccessToken', results[0]),\n            authorization.set('AccessTokenSecret', results[1]),\n            authorization.set('currentStep', 'AccessToken')\n          ]).then(() => {\n            return authorization.done();\n          });\n        })\n\n      break;\n\n    default:\n      //do request token auth\n      this._logger.info('requesting request token');\n      return this._auth.getOAuthRequestTokenAsync()\n        .then((results) => {\n          return Promise.all([\n            authorization.set('RequestToken', results[0]),\n            authorization.set('RequestTokenSecret', results[1]),\n            authorization.set('currentStep', 'RequestToken')\n          ]).then(() => {\n            this._logger.info('redirecting user');\n            let authorizationUri = this._configuration.authorizationUri;\n            authorizationUri.query = authorizationUri.query || {};\n            authorizationUri.query.oauth_token = results[0];\n            return authorization.redirect(authorizationUri.format())\n          });\n        });\n    }\n    //default just mark as done\n    return authorization.done();\n  }\n\n}\n"],"sourceRoot":"/source/"}