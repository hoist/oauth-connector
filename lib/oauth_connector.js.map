{"version":3,"sources":["oauth_connector.js"],"names":[],"mappings":"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","file":"oauth_connector.js","sourcesContent":["'use strict';\nimport Bluebird from 'bluebird';\nimport config from 'config';\nimport url from 'url';\nimport {\n  clone\n}\nfrom 'lodash';\nimport {\n  OAuth\n}\nfrom '@hoist/oauth';\nimport logger from '@hoist/logger';\n\n/**\n * @protected\n * The base OAuth2 Connector class used for Hoist Connectors to implement OAuth2 flows\n * @implements {ConnectorInterface}\n */\nexport class OAuthConnectorBase {\n\n  /**\n   * @protected\n   * create a new OAuth2Connector\n   * @param {object} configuration - the configuration details for this connector\n   * @param {string} configuration.consumerKey - the OAuth consumer key\n   * @param {string} configuration.consumerSecret - the OAuth consumer secret\n   * @param {string} configuration.requestTokenUri - the uri to use for request token calls\n   * @param {string} configuration.accessTokenUri - the uri to use for access token calls\n   * @param {string} configuration.authorizationUri - the uri to send users to authorise access\n   * @param {object} [configuration.oauthVersion=1.0A] - the version of OAuth to use\n   * @param {object} [configuration.signingMethod=HMAC-SHA1] - the signing method to use\n   */\n  constructor(configuration) {\n    this._logger = logger.child({\n      cls: this.constructor.name\n    });\n    this._configuration = configuration;\n    this._configuration.authorizationUri = url.parse(this._configuration.authorizationUri, true);\n    delete this._configuration.authorizationUri.search;\n    this._logger.info({\n      configuraion: this._configuration\n    });\n    this._auth = Bluebird.promisifyAll(\n      new OAuth(\n        configuration.requestTokenUri,\n        configuration.accessTokenUri,\n        configuration.consumerKey,\n        configuration.consumerSecret,\n        configuration.oauthVersion || '1.0A',\n        `https://${config.get('Hoist.domains.bouncer')}/bounce`,\n        configuration.signingMethod || 'HMAC-SHA1'\n      ));\n    this._auth._performSecureRequestAsync = Bluebird.promisify(this._auth._performSecureRequest, this._auth)\n  }\n\n  /**\n   * perform an authorized request\n   * @param {string} method - the HTTP method to call\n   * @param {string} requestUri - the uri of the request to call\n   * @param {string} body - the data to send\n   * @param {string} contentType - the contentType header\n   */\n  _performRequest(method, requestUri, body, contentType) {\n    let extraParams;\n    if (contentType && contentType === 'application/x-www-form-urlencoded') {\n      extraParams = body;\n      body = null;\n    }\n    if (body && (!(typeof (body) === 'string' || body instanceof Buffer))) {\n      body = JSON.stringify(body);\n    }\n\n    return this._auth._performSecureRequestAsync(\n      this._accessToken,\n      this._accessTokenSecret,\n      method,\n      requestUri,\n      extraParams,\n      body,\n      contentType || 'application/json')\n  }\n\n  _setupAuthorizationQuery(query) {\n    return query;\n  }\n\n  /**\n   * authorize the oauth connection with existing parameters\n   * @param {<AuthorizationStore>} authorization - the users authorization\n   */\n  authorize(authorization) {\n    this._accessToken = authorization.get('AccessToken');\n    this._accessTokenSecret = authorization.get('AccessTokenSecret');\n  }\n\n  /**\n   * @param {AuthorizationStore} authorization - the users authorization\n   */\n  receiveBounce(authorization) {\n    this._logger.info('receiving bounce');\n    var authStep = authorization.get('currentStep');\n    switch (authStep) {\n    case 'RequestToken':\n      //get access token\n      this._logger.info('requesting access token');\n      return this._auth.getOAuthAccessTokenAsync(\n          authorization.get('RequestToken'),\n          authorization.get('RequestTokenSecret'),\n          authorization.query.oauth_verifier)\n        .then((results) => {\n          return authorization.set('AccessToken', results[0]).then(() => {\n            return authorization.set('AccessTokenSecret', results[1]);\n          }).then(() => {\n            return authorization.set('currentStep', 'AccessToken');\n          }).then(() => {\n            return authorization.done();\n          });\n        })\n\n      break;\n\n    default:\n      //do request token auth\n      this._logger.info('requesting request token');\n      return this._auth.getOAuthRequestTokenAsync()\n        .then((results) => {\n          return authorization.set('RequestToken', results[0]).\n          then(() => {\n            return authorization.set('RequestTokenSecret', results[1]);\n          }).then(() => {\n            return authorization.set('currentStep', 'RequestToken')\n          }).then(() => {\n            this._logger.info('redirecting user');\n            let authorizationUri = this._configuration.authorizationUri;\n            authorizationUri.query = this._setupAuthorizationQuery(authorizationUri.query || {});\n            authorizationUri.query.oauth_token = results[0];\n            return authorization.redirect(authorizationUri.format())\n          });\n        });\n    }\n    //default just mark as done\n    return authorization.done();\n  }\n\n}\n"],"sourceRoot":"/source/"}