{"version":3,"sources":["oauth2_connector.js"],"names":[],"mappings":"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","file":"oauth2_connector.js","sourcesContent":["'use strict';\nimport Bluebird from 'bluebird';\nimport config from 'config';\nimport {\n  OAuth2\n}\nfrom '@hoist/oauth';\n\n/**\n * @protected\n * The base OAuth2 Connector class used for Hoist Connectors to implement OAuth2 flows\n * @implements {ConnectorInterface}\n */\nexport default class OAuth2ConnectorBase {\n\n  /**\n   * @protected\n   * create a new OAuth2Connector\n   * @param {object} configuration - the configuration details for this connector\n   * @param {string} configuration.clientId - the OAuth2 client id\n   * @param {string} configuration.clientSecret - the OAuth2 client secret\n   * @param {string} configuration.baseSite - the base uri to use for authorization calls\n   * @param {string} [configuration.authorizationPath=/oauth/authorize] - the path to send users to authorise access\n   * @param {string} [configuration.accessTokenPath=/oauth/access_token] - the path to use to retrieve access tokens\n   * @param {object} [configuration.customHeaders] - any custom headers to send\n   */\n  constructor(configuration) {\n    this._configureClient(configuration);\n  }\n\n  /**\n   * Populate any extra params needed to grant access\n   * @protected\n   * @param {AuthorizationStore} authorization - the users authorisation store\n   * @returns {Promise<object>} - an object containing key value pairs to send with the client to the authorization url\n   */\n  _authorizeParams(authorization) {\n    return Promise.resolve({\n      redirect_uri: `https://${config.get('Hoist.domains.bouncer')}/bounce`\n    });\n  }\n\n  /**\n   * @protected\n   * configure the underlying oauth provider\n   * @param {object} configuration - the configuration details for this connector\n   * @param {string} configuration.clientId - the OAuth2 client id\n   * @param {string} configuration.clientSecret - the OAuth2 client secret\n   * @param {string} configuration.baseSite - the base uri to use for authorization calls\n   * @param {string} [configuration.authorizationPath=/oauth/authorize] - the path to send users to authorise access\n   * @param {string} [configuration.accessTokenPath=/oauth/access_token] - the path to use to retrieve access tokens\n   * @param {object} [configuration.customHeaders] - any custom headers to send\n   */\n  _configureClient(configuration) {\n    this._auth = Bluebird.promisifyAll(new OAuth2(configuration.clientId, configuration.clientSecret, configuration.baseSite, configuration.authorizationPath, configuration.accessTokenPath, configuration.customHeaders));\n    this._auth._requestAsync = Bluebird.promisify(this._auth._request, this._auth);\n  }\n\n  /**\n   * Populate any extra params needed to request the access token\n   * @protected\n   * @param {AuthorizationStore} authorization - the users authorisation store\n   * @returns {Promise<object>} - an object containing key value pairs to send with the access token request\n   */\n  _accessParams(authorization) {\n    return Promise.resolve();\n  }\n  _processResults(results) {\n    return Promise.resolve();\n  }\n\n  /**\n   * perform an authorized request\n   * @param {string} method - the HTTP method to call\n   * @param {string} requestUri - the uri of the request to call\n   * @param {object} body - the data to send\n   * @param {string} contentType - the contentType header\n   */\n  _performRequest(method, requestUri, body, contentType) {\n    let accessToken = this._authorization.get('AccessToken');\n    let headers = {\n      'Content-Type': contentType || 'application/json',\n      'User-Agent': 'Hoist',\n      'Authorization': this._auth.buildAuthHeader(accessToken)\n    };\n    if (body && !(typeof (body) === 'string' || body instanceof Buffer)) {\n      body = JSON.stringify(body);\n    }\n    return this._auth._requestAsync(method, requestUri, headers, body, accessToken);\n  }\n\n  /**\n   * authorize the oauth connection with existing parameters\n   * @param {<AuthorizationStore>} authorization - the users authorization\n   */\n  authorize(authorization) {\n    this._authorization = authorization;\n  }\n\n  /**\n   * @param {AuthorizationStore} authorization - the users authorization\n   */\n  receiveBounce(authorization) {\n    var authStep = authorization.get('currentStep');\n    if (!authStep) {\n      //no authorization has been done yet so lets get the authorization url and redirec the user there\n      return this._authorizeParams(authorization)\n        .then((params) => {\n          return this._auth.getAuthorizeUrl(params);\n        }).then((authUri) => {\n          //set the step so we know to get the access token when they return\n          return authorization.set('currentStep', 'authorization')\n            .then(() => {\n              //redirect the user\n              return authorization.redirect(authUri);\n            })\n        });\n    } else if (authStep === 'authorization') {\n      return this._accessParams(authorization)\n        .then((params) => {\n          return this._auth.getOAuthAccessTokenAsync(authorization.query.code, params);\n        }).then((results) => {\n          return authorization.set('AccessToken', results[0])\n            .then(() => {\n              return authorization.set('RefreshToken', results[1]);\n            }).then(() => {\n              return this._processResults(results[2]);\n            }).then(() => {\n              return authorization.done();\n            });\n        });\n    }\n    //default just mark as done\n    return authorization.done();\n  }\n\n}\n"],"sourceRoot":"/source/"}