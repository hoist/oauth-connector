{"version":3,"sources":["oauth2_connector.js"],"names":[],"mappings":"AAAA;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAUa;;;;;;;;;;;;;;AAaX,WAbW,mBAaX,CAAY,aAAZ,EAA2B;0BAbhB,qBAagB;;AACzB,SAAK,gBAAL,CAAsB,aAAtB,EADyB;GAA3B;;;;;;;;;;eAbW;;qCAuBM,eAAe;AAC9B,aAAO,QAAQ,OAAR,CAAgB;AACrB,mCAAyB,iBAAO,GAAP,CAAW,uBAAX,aAAzB;OADK,CAAP,CAD8B;;;;;;;;;;;;;;;;;qCAiBf,eAAe;AAC9B,WAAK,KAAL,GAAa,mBAAS,YAAT,CAAsB,kBAAW,cAAc,QAAd,EAAwB,cAAc,YAAd,EAA4B,cAAc,QAAd,EAAwB,cAAc,iBAAd,EAAiC,cAAc,eAAd,EAA+B,cAAc,aAAd,CAA7K,EAA2M;AACtN,mBAAW,IAAX;OADW,CAAb,CAD8B;AAI9B,WAAK,KAAL,CAAW,aAAX,GAA2B,mBAAS,SAAT,CAAmB,KAAK,KAAL,CAAW,QAAX,EAAqB,KAAK,KAAL,EAAY;AAC7E,mBAAW,IAAX;OADyB,CAA3B,CAJ8B;;;;;;;;;;;;kCAelB,eAAe;AAC3B,aAAO,QAAQ,OAAR,EAAP,CAD2B;;;;oCAGb,SAAS;AACvB,aAAO,QAAQ,OAAR,EAAP,CADuB;;;;;;;;;;;;;oCAWT,QAAQ,YAAY,MAAM,aAAa;AACrD,UAAI,cAAc,KAAK,cAAL,CAAoB,GAApB,CAAwB,aAAxB,CAAd,CADiD;AAErD,UAAI,UAAU;AACZ,wBAAgB,eAAe,kBAAf;AAChB,sBAAc,OAAd;AACA,yBAAiB,KAAK,KAAL,CAAW,eAAX,CAA2B,WAA3B,CAAjB;OAHE,CAFiD;AAOrD,UAAI,QAAQ,EAAE,OAAQ,IAAR,KAAkB,QAAlB,IAA8B,gBAAgB,MAAhB,CAAhC,EAAyD;AACnE,eAAO,KAAK,SAAL,CAAe,IAAf,CAAP,CADmE;OAArE;AAGA,aAAO,KAAK,KAAL,CAAW,aAAX,CAAyB,MAAzB,EAAiC,UAAjC,EAA6C,OAA7C,EAAsD,IAAtD,EAA4D,WAA5D,CAAP,CAVqD;;;;;;;;;;8BAiB7C,eAAe;AACvB,WAAK,cAAL,GAAsB,aAAtB,CADuB;;;;;;;;;kCAOX,eAAe;;;AAC3B,UAAI,WAAW,cAAc,GAAd,CAAkB,aAAlB,CAAX,CADuB;AAE3B,UAAI,CAAC,QAAD,EAAW;;AAEb,eAAO,KAAK,gBAAL,CAAsB,aAAtB,EACJ,IADI,CACC,UAAC,MAAD,EAAY;AAChB,iBAAO,MAAK,KAAL,CAAW,eAAX,CAA2B,MAA3B,CAAP,CADgB;SAAZ,CADD,CAGF,IAHE,CAGG,UAAC,OAAD,EAAa;;AAEnB,iBAAO,cAAc,GAAd,CAAkB,aAAlB,EAAiC,eAAjC,EACJ,IADI,CACC,YAAM;;AAEV,mBAAO,cAAc,QAAd,CAAuB,OAAvB,CAAP,CAFU;WAAN,CADR,CAFmB;SAAb,CAHV,CAFa;OAAf,MAaO,IAAI,aAAa,eAAb,EAA8B;AACvC,eAAO,KAAK,aAAL,CAAmB,aAAnB,EACJ,IADI,CACC,UAAC,MAAD,EAAY;AAChB,iBAAO,MAAK,KAAL,CAAW,wBAAX,CAAoC,cAAc,KAAd,CAAoB,IAApB,EAA0B,MAA9D,CAAP,CADgB;SAAZ,CADD,CAGF,IAHE,CAGG,UAAC,OAAD,EAAa;AACnB,iBAAO,cAAc,GAAd,CAAkB,aAAlB,EAAiC,QAAQ,CAAR,CAAjC,EACJ,IADI,CACC,YAAM;AACV,mBAAO,cAAc,GAAd,CAAkB,cAAlB,EAAkC,QAAQ,CAAR,CAAlC,CAAP,CADU;WAAN,CADD,CAGF,IAHE,CAGG,YAAM;AACZ,mBAAO,MAAK,eAAL,CAAqB,QAAQ,CAAR,CAArB,CAAP,CADY;WAAN,CAHH,CAKF,IALE,CAKG,YAAM;AACZ,mBAAO,cAAc,IAAd,EAAP,CADY;WAAN,CALV,CADmB;SAAb,CAHV,CADuC;OAAlC;;AAfoB,aA+BpB,cAAc,IAAd,EAAP,CA/B2B;;;;SA7FlB","file":"oauth2_connector.js","sourcesContent":["'use strict';\nimport Bluebird from 'bluebird';\nimport config from 'config';\nimport {\n  OAuth2\n}\nfrom '@hoist/oauth';\n\n/**\n * @protected\n * The base OAuth2 Connector class used for Hoist Connectors to implement OAuth2 flows\n * @implements {ConnectorInterface}\n */\nexport class OAuth2ConnectorBase {\n\n  /**\n   * @protected\n   * create a new OAuth2Connector\n   * @param {object} configuration - the configuration details for this connector\n   * @param {string} configuration.clientId - the OAuth2 client id\n   * @param {string} configuration.clientSecret - the OAuth2 client secret\n   * @param {string} configuration.baseSite - the base uri to use for authorization calls\n   * @param {string} [configuration.authorizationPath=/oauth/authorize] - the path to send users to authorise access\n   * @param {string} [configuration.accessTokenPath=/oauth/access_token] - the path to use to retrieve access tokens\n   * @param {object} [configuration.customHeaders] - any custom headers to send\n   */\n  constructor(configuration) {\n    this._configureClient(configuration);\n  }\n\n  /**\n   * Populate any extra params needed to grant access\n   * @protected\n   * @param {AuthorizationStore} authorization - the users authorisation store\n   * @returns {Promise<object>} - an object containing key value pairs to send with the client to the authorization url\n   */\n  _authorizeParams(authorization) {\n    return Promise.resolve({\n      redirect_uri: `https://${config.get('Hoist.domains.bouncer')}/bounce`\n    });\n  }\n\n  /**\n   * @protected\n   * configure the underlying oauth provider\n   * @param {object} configuration - the configuration details for this connector\n   * @param {string} configuration.clientId - the OAuth2 client id\n   * @param {string} configuration.clientSecret - the OAuth2 client secret\n   * @param {string} configuration.baseSite - the base uri to use for authorization calls\n   * @param {string} [configuration.authorizationPath=/oauth/authorize] - the path to send users to authorise access\n   * @param {string} [configuration.accessTokenPath=/oauth/access_token] - the path to use to retrieve access tokens\n   * @param {object} [configuration.customHeaders] - any custom headers to send\n   */\n  _configureClient(configuration) {\n    this._auth = Bluebird.promisifyAll(new OAuth2(configuration.clientId, configuration.clientSecret, configuration.baseSite, configuration.authorizationPath, configuration.accessTokenPath, configuration.customHeaders), {\n      multiArgs: true\n    });\n    this._auth._requestAsync = Bluebird.promisify(this._auth._request, this._auth, {\n      multiArgs: true\n    });\n  }\n\n  /**\n   * Populate any extra params needed to request the access token\n   * @protected\n   * @param {AuthorizationStore} authorization - the users authorisation store\n   * @returns {Promise<object>} - an object containing key value pairs to send with the access token request\n   */\n  _accessParams(authorization) {\n    return Promise.resolve();\n  }\n  _processResults(results) {\n    return Promise.resolve();\n  }\n\n  /**\n   * perform an authorized request\n   * @param {string} method - the HTTP method to call\n   * @param {string} requestUri - the uri of the request to call\n   * @param {object} body - the data to send\n   * @param {string} contentType - the contentType header\n   */\n  _performRequest(method, requestUri, body, contentType) {\n    let accessToken = this._authorization.get('AccessToken');\n    let headers = {\n      'Content-Type': contentType || 'application/json',\n      'User-Agent': 'Hoist',\n      'Authorization': this._auth.buildAuthHeader(accessToken)\n    };\n    if (body && !(typeof (body) === 'string' || body instanceof Buffer)) {\n      body = JSON.stringify(body);\n    }\n    return this._auth._requestAsync(method, requestUri, headers, body, accessToken);\n  }\n\n  /**\n   * authorize the oauth connection with existing parameters\n   * @param {<AuthorizationStore>} authorization - the users authorization\n   */\n  authorize(authorization) {\n    this._authorization = authorization;\n  }\n\n  /**\n   * @param {AuthorizationStore} authorization - the users authorization\n   */\n  receiveBounce(authorization) {\n    var authStep = authorization.get('currentStep');\n    if (!authStep) {\n      //no authorization has been done yet so lets get the authorization url and redirec the user there\n      return this._authorizeParams(authorization)\n        .then((params) => {\n          return this._auth.getAuthorizeUrl(params);\n        }).then((authUri) => {\n          //set the step so we know to get the access token when they return\n          return authorization.set('currentStep', 'authorization')\n            .then(() => {\n              //redirect the user\n              return authorization.redirect(authUri);\n            })\n        });\n    } else if (authStep === 'authorization') {\n      return this._accessParams(authorization)\n        .then((params) => {\n          return this._auth.getOAuthAccessTokenAsync(authorization.query.code, params);\n        }).then((results) => {\n          return authorization.set('AccessToken', results[0])\n            .then(() => {\n              return authorization.set('RefreshToken', results[1]);\n            }).then(() => {\n              return this._processResults(results[2]);\n            }).then(() => {\n              return authorization.done();\n            });\n        });\n    }\n    //default just mark as done\n    return authorization.done();\n  }\n\n}\n"],"sourceRoot":"/source/"}